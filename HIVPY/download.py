import os
import requests
import time
import re
from bs4 import BeautifulSoup

# 基础路径
base_path = r"way\to\your\path"

# 所有序列的Accession号列表
all_accessions = [
    # 牙医序列
    "M90847.1", "M90848.1", "M90849.1", "M90850.1", "M90851.1", "M90852.1", "M90853.1",
    # 患者A
    "M90854.1", "M90855.1", "M90856.1", "M90857.1", "M90858.1", "M90859.1", "M90860.1",
    "M92100.1", "M92101.1", "M92102.1", "M92103.1", "M92104.1", "M92105.1", "M92106.1",
    "M92107.1", "M92108.1", "M92109.1", "M92110.1", "M92111.1", "M92112.1", "M92113.1", "M92114.1",
    # 患者B
    "M90861.1", "M90862.1", "M90863.1", "M90864.1", "M90865.1", "M90866.1", "M90867.1",
    "M90868.1", "M90869.1", "M90870.1", "M90871.1", "M90872.1", "M90873.1", "M90874.1",
    "M92115.1", "M92116.1", "M92117.1", "M92118.1", "M92119.1", "M92120.1", "M92121.1",
    "M92122.1", "M92123.1", "M92124.1", "M92125.1", "M92126.1",
    # 患者C
    "M90875.1", "M90876.1", "M90877.1", "M90878.1", "M90879.1", "M90880.1",
    # 患者D
    "M90881.1", "M90882.1", "M90883.1", "M90884.1", "M90885.1", "M90886.1",
    # 患者E
    "M90887.1", "M90888.1", "M90889.1", "M90890.1", "M90891.1", "M90892.1", "M90893.1",
    # 患者F
    "M90894.1", "M90895.1", "M90896.1", "M90897.1", "M90898.1", "M90899.1", "M90900.1",
    # 患者G
    "M90901.1", "M90902.1", "M90903.1", "M90904.1", "M90905.1", "M90906.1",
    # 本地对照
    "M90914.1", "M90915.1", "M90916.1", "M90917.1", "M90918.1", "M90919.1", "M90920.1",
    "M90921.1", "M90922.1", "M90923.1", "M90924.1", "M90925.1", "M90926.1", "M90927.1",
    "M90928.1", "M90929.1", "M90930.1", "M90931.1", "M90932.1", "M90933.1", "M90934.1",
    "M90935.1", "M90936.1", "M90937.1", "M90938.1", "M90939.1", "M90940.1", "M90941.1",
    "M90942.1", "M90943.1", "M90944.1", "M90945.1", "M90946.1", "M90947.1", "M90948.1",
    "M90949.1", "M90950.1", "M90951.1", "M90952.1", "M90953.1", "M90954.1", "M90955.1",
    "M90956.1", "M90957.1", "M90958.1", "M90959.1", "M90960.1", "M90961.1", "M90962.1",
    "M90963.1", "M90964.1", "M90965.1", "M90966.1",
    "M92127.1", "M92128.1", "M92129.1", "M92130.1", "M92131.1", "M92132.1", "M92133.1",
    "M92134.1", "M92135.1", "M92136.1", "M92137.1", "M92138.1", "M92139.1", "M92140.1",
    "M92141.1", "M92142.1", "M92143.1", "M92144.1", "M92145.1", "M92146.1", "M92147.1",
    "M92148.1", "M92149.1", "M92150.1"
]

# 序列分类映射
sequence_mapping = {
    # 牙医
    "M90847.1": ("牙医", "直接测序"),
    "M90848.1": ("牙医", "克隆序列"), "M90849.1": ("牙医", "克隆序列"),
    "M90850.1": ("牙医", "克隆序列"), "M90851.1": ("牙医", "克隆序列"),
    "M90852.1": ("牙医", "克隆序列"), "M90853.1": ("牙医", "克隆序列"),

    # 患者A
    "M90854.1": ("患者A", "直接测序"),
    "M90855.1": ("患者A", "克隆序列"), "M90856.1": ("患者A", "克隆序列"),
    "M90857.1": ("患者A", "克隆序列"), "M90858.1": ("患者A", "克隆序列"),
    "M90859.1": ("患者A", "克隆序列"), "M90860.1": ("患者A", "克隆序列"),
    "M92100.1": ("患者A", "部分序列/V3区"), "M92101.1": ("患者A", "部分序列/V3区"),
    "M92102.1": ("患者A", "部分序列/V3区"), "M92103.1": ("患者A", "部分序列/V3区"),
    "M92104.1": ("患者A", "部分序列/V4区"), "M92105.1": ("患者A", "部分序列/V4区"),
    "M92106.1": ("患者A", "部分序列/V4区"), "M92107.1": ("患者A", "部分序列/V4区"),
    "M92108.1": ("患者A", "部分序列/V4区"), "M92109.1": ("患者A", "部分序列/V5区"),
    "M92110.1": ("患者A", "部分序列/V5区"), "M92111.1": ("患者A", "部分序列/V5区"),
    "M92112.1": ("患者A", "部分序列/V5区"), "M92113.1": ("患者A", "部分序列/V5区"),
    "M92114.1": ("患者A", "部分序列/V5区"),

    # 患者B
    "M90861.1": ("患者B", "直接测序"),
    "M90862.1": ("患者B", "克隆序列"), "M90863.1": ("患者B", "克隆序列"),
    "M90864.1": ("患者B", "克隆序列"), "M90865.1": ("患者B", "克隆序列"),
    "M90866.1": ("患者B", "克隆序列"), "M90867.1": ("患者B", "克隆序列"),
    "M90868.1": ("患者B", "克隆序列"), "M90869.1": ("患者B", "克隆序列"),
    "M90870.1": ("患者B", "克隆序列"), "M90871.1": ("患者B", "克隆序列"),
    "M90872.1": ("患者B", "克隆序列"), "M90873.1": ("患者B", "克隆序列"),
    "M90874.1": ("患者B", "克隆序列"),
    "M92115.1": ("患者B", "部分序列/V3区"), "M92116.1": ("患者B", "部分序列/V3区"),
    "M92117.1": ("患者B", "部分序列/V3区"), "M92118.1": ("患者B", "部分序列/V4区"),
    "M92119.1": ("患者B", "部分序列/V4区"), "M92120.1": ("患者B", "部分序列/V4区"),
    "M92121.1": ("患者B", "部分序列/V4区"), "M92122.1": ("患者B", "部分序列/V4区"),
    "M92123.1": ("患者B", "部分序列/V5区"), "M92124.1": ("患者B", "部分序列/V5区"),
    "M92125.1": ("患者B", "部分序列/V5区"), "M92126.1": ("患者B", "部分序列/V5区"),

    # 患者C
    "M90875.1": ("患者C", "直接测序"),
    "M90876.1": ("患者C", "克隆序列"), "M90877.1": ("患者C", "克隆序列"),
    "M90878.1": ("患者C", "克隆序列"), "M90879.1": ("患者C", "克隆序列"),
    "M90880.1": ("患者C", "克隆序列"),

    # 患者D
    "M90881.1": ("患者D", "直接测序"),
    "M90882.1": ("患者D", "克隆序列"), "M90883.1": ("患者D", "克隆序列"),
    "M90884.1": ("患者D", "克隆序列"), "M90885.1": ("患者D", "克隆序列"),
    "M90886.1": ("患者D", "克隆序列"),

    # 患者E
    "M90887.1": ("患者E", "直接测序"),
    "M90888.1": ("患者E", "克隆序列"), "M90889.1": ("患者E", "克隆序列"),
    "M90890.1": ("患者E", "克隆序列"), "M90891.1": ("患者E", "克隆序列"),
    "M90892.1": ("患者E", "克隆序列"), "M90893.1": ("患者E", "克隆序列"),

    # 患者F
    "M90894.1": ("患者F", "直接测序"),
    "M90895.1": ("患者F", "克隆序列"), "M90896.1": ("患者F", "克隆序列"),
    "M90897.1": ("患者F", "克隆序列"), "M90898.1": ("患者F", "克隆序列"),
    "M90899.1": ("患者F", "克隆序列"), "M90900.1": ("患者F", "克隆序列"),

    # 患者G
    "M90901.1": ("患者G", "直接测序"),
    "M90902.1": ("患者G", "克隆序列"), "M90903.1": ("患者G", "克隆序列"),
    "M90904.1": ("患者G", "克隆序列"), "M90905.1": ("患者G", "克隆序列"),
    "M90906.1": ("患者G", "克隆序列"),


    # 本地对照
    "M90914.1": ("本地对照", "LC01"), "M90915.1": ("本地对照", "LC01"), "M90916.1": ("本地对照", "LC01"),
    "M90917.1": ("本地对照", "LC02"), "M90918.1": ("本地对照", "LC02"), "M90919.1": ("本地对照", "LC02"),
    "M90920.1": ("本地对照", "LC02"), "M90921.1": ("本地对照", "LC02"), "M90922.1": ("本地对照", "LC02"),
    "M90923.1": ("本地对照", "LC03"), "M90924.1": ("本地对照", "LC03"), "M90925.1": ("本地对照", "LC03"),
    "M90926.1": ("本地对照", "LC03"), "M90927.1": ("本地对照", "LC03"), "M90928.1": ("本地对照", "LC03"),
    "M90929.1": ("本地对照", "LC03"), "M90930.1": ("本地对照", "LC04"), "M90931.1": ("本地对照", "LC04"),
    "M90932.1": ("本地对照", "LC04"), "M90933.1": ("本地对照", "LC04"), "M90934.1": ("本地对照", "LC05"),
    "M90935.1": ("本地对照", "LC06"), "M90936.1": ("本地对照", "LC07"), "M90937.1": ("本地对照", "LC08"),
    "M90938.1": ("本地对照", "LC09"), "M90939.1": ("本地对照", "LC09"), "M90940.1": ("本地对照", "LC10"),
    "M90941.1": ("本地对照", "LC11"), "M90942.1": ("本地对照", "LC12"), "M90943.1": ("本地对照", "LC13"),
    "M90944.1": ("本地对照", "LC14"), "M90945.1": ("本地对照", "LC15"), "M90946.1": ("本地对照", "LC16"),
    "M90947.1": ("本地对照", "LC17"), "M90948.1": ("本地对照", "LC18"), "M90949.1": ("本地对照", "LC19"),
    "M90950.1": ("本地对照", "LC20"), "M90951.1": ("本地对照", "LC21"), "M90952.1": ("本地对照", "LC22"),
    "M90953.1": ("本地对照", "LC23"), "M90954.1": ("本地对照", "LC24"), "M90955.1": ("本地对照", "LC25"),
    "M90956.1": ("本地对照", "LC26"), "M90957.1": ("本地对照", "LC27"), "M90958.1": ("本地对照", "LC28"),
    "M90959.1": ("本地对照", "LC29"), "M90960.1": ("本地对照", "LC30"), "M90961.1": ("本地对照", "LC31"),
    "M90962.1": ("本地对照", "LC32"), "M90963.1": ("本地对照", "LC33"), "M90964.1": ("本地对照", "LC34"),
    "M90965.1": ("本地对照", "LC35"), "M90966.1": ("本地对照", "LC36"),
    "M92127.1": ("本地对照", "部分序列/V3区"), "M92128.1": ("本地对照", "部分序列/V3区"),
    "M92129.1": ("本地对照", "部分序列/V3区"), "M92130.1": ("本地对照", "部分序列/V3区"),
    "M92131.1": ("本地对照", "部分序列/V3区"), "M92132.1": ("本地对照", "部分序列/V3区"),
    "M92133.1": ("本地对照", "部分序列/V3区"), "M92134.1": ("本地对照", "部分序列/V4区"),
    "M92135.1": ("本地对照", "部分序列/V4区"), "M92136.1": ("本地对照", "部分序列/V4区"),
    "M92137.1": ("本地对照", "部分序列/V4区"), "M92138.1": ("本地对照", "部分序列/V4区"),
    "M92139.1": ("本地对照", "部分序列/V4区"), "M92140.1": ("本地对照", "部分序列/V4区"),
    "M92141.1": ("本地对照", "部分序列/V5区"), "M92142.1": ("本地对照", "部分序列/V5区"),
    "M92143.1": ("本地对照", "部分序列/V5区"), "M92144.1": ("本地对照", "部分序列/V5区"),
    "M92145.1": ("本地对照", "部分序列/V5区"), "M92146.1": ("本地对照", "部分序列/V5区"),
    "M92147.1": ("本地对照", "部分序列/V5区"), "M92148.1": ("本地对照", "部分序列/V5区"),
    "M92149.1": ("本地对照", "部分序列/V5区"), "M92150.1": ("本地对照", "部分序列/V5区")
}


def download_sequence(accession, save_path):
    """下载单个序列并保存到指定路径"""
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&id={accession}&rettype=fasta&retmode=text"

    try:
        response = requests.get(url)
        response.raise_for_status()

        with open(save_path, 'w', encoding='utf-8') as f:
            f.write(response.text)
        print(f"成功下载: {accession} -> {save_path}")
        return True
    except Exception as e:
        print(f"下载失败 {accession}: {str(e)}")
        return False


def create_directory_structure():
    """创建目录结构并下载所有序列"""
    total = len(all_accessions)
    success = 0
    failures = []

    for i, accession in enumerate(all_accessions, 1):
        if accession in sequence_mapping:
            category, sub_type = sequence_mapping[accession]
            category_path = os.path.join(base_path, category)

            # 处理子类型中的斜杠（用于部分序列的二级分类）
            if "/" in sub_type:
                sub_type_parts = sub_type.split("/")
                dir_path = os.path.join(category_path, *sub_type_parts)
            else:
                dir_path = os.path.join(category_path, sub_type)

            os.makedirs(dir_path, exist_ok=True)
            save_path = os.path.join(dir_path, f"{accession}.fasta")

            # 如果文件已存在，跳过下载
            if os.path.exists(save_path):
                print(f"文件已存在，跳过: {accession}")
                success += 1
                continue

            # 下载序列
            if download_sequence(accession, save_path):
                success += 1
            else:
                failures.append(accession)

            # 避免请求过快，添加延迟
            time.sleep(0.5)
        else:
            print(f"未找到分类信息: {accession}")
            failures.append(accession)

        # 显示进度
        print(f"进度: {i}/{total} ({i / total * 100:.1f}%)")

    # 下载结果摘要
    print("\n下载完成!")
    print(f"成功下载: {success}/{total}")
    if failures:
        print(f"失败序列: {', '.join(failures)}")


if __name__ == "__main__":
    print("开始创建目录结构并下载序列...")
    create_directory_structure()
    print("所有序列下载完成！")
#需手动补充非洲的根样本
